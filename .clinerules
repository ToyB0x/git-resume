# git-resume プロジェクト - Cline/RooCode エントリポイント

このファイルは、Cline/RooCodeがプロジェクトを理解・評価する際のエントリポイントです。重要なドキュメントの概要とリンク一覧を提供し、AIがプロジェクトの構造を効率的に把握できるようにします。

## プロジェクト概要

git-resumeは、エンジニアのキャリア管理と成長をサポートするアプリケーションです。GitHubの活動履歴からレジュメを自動生成し、キャリアプランの策定、自己マーケティング戦略の開発と実行状況のモニタリングを支援します。また、時代のトレンドに合わせた行動指針を提案し、エンジニアとしての生存戦略をサポートします。

## プロジェクト理解のためのステップバイステップガイド

1. **プロジェクト全体像の把握**:
   - [README.md](README.md) - プロジェクトの概要、主要機能、構成
   - [ドキュメントガイドライン](docs/README.md) - ドキュメント体系と構造

2. **アーキテクチャと構成の理解**:
   - [プロジェクト構成](README.md#プロジェクト構成) - モノレポ構造の概要
   - [ドキュメント構造](docs/README.md#ドキュメント構造) - ドキュメントの配置と構造

3. **機能と実装の詳細把握**:
   - [主要機能](README.md#主要機能) - 提供する機能の概要
   - [アプリケーションREADME](apps/api/README.md) - APIサーバーの詳細
   - [Webアプリケーション](apps/web/README.md) - フロントエンドの詳細

4. **開発ガイドラインの理解**:
   - [開発者ガイド](docs/guide/developer/README.md) - 開発環境構築、API仕様、実装ガイドライン
   - [コミットルール](docs/rules/ai/commit.md) - コミットメッセージのルール

## 重要ルール

### コンテキスト最適化

- **段階的情報取得**:
  - 初期段階では必要最小限の情報のみを読み込み、詳細は必要に応じて遅延読み込みする
  - ユーザーが特定の機能やドキュメントについて質問した場合のみ、関連ドキュメントを読み込む
  - 大量のコードやドキュメントを一度に読み込まず、必要な部分のみを参照する
  - 読み込んだ情報の要点を把握し、不要な詳細は省略する

### 更新と検証

- **一貫性の維持**:
  - プロジェクト構造や重要ドキュメントの変更を検出した場合、関連する設定ファイルを即時更新する
  - ドキュメント間のリンクが有効かを確認し、無効なリンクを発見した場合は修正を提案する
  - 設定ファイル間で矛盾する情報を発見した場合、一貫性のある情報に更新する
  - 古い情報や廃止された参照を発見した場合、最新の情報に基づいて更新を提案する

### Repomix活用

- **効率的なコード理解**:
  - **最優先で検討**: 大規模コードベースの分析が必要な場合は、常にRepomixの使用を最初に検討する
  - **新規プロジェクト理解**: 初めて触れるコードベースでは、手動分析の前にRepomixを実行し、主要コンポーネント、依存関係、アーキテクチャを短時間で把握する
    ```javascript
    // 例: プロジェクト全体構造の分析
    <use_mcp_tool>
    <server_name>repomix</server_name>
    <tool_name>pack_codebase</tool_name>
    <arguments>
    {
      "directory": "/Users/user/github/survive",
      "compress": true
    }
    </arguments>
    </use_mcp_tool>
    ```
  - **特定機能調査**: 機能やモジュールの調査では、関連コードを手動で探す前にRepomixで効率的に特定する
    ```javascript
    // 例: レジュメ生成機能に関連するファイルの分析
    <use_mcp_tool>
    <server_name>repomix</server_name>
    <tool_name>pack_codebase</tool_name>
    <arguments>
    {
      "directory": "/Users/user/github/survive",
      "compress": true,
      "includePatterns": "**/resume/**,**/services/src/resume*"
    }
    </arguments>
    </use_mcp_tool>
    ```
  - **バグ修正・機能追加**: コード変更前に必ずRepomixで依存関係を分析し、影響範囲を予測する
  - **継続的活用**: プロジェクトの進行に合わせて定期的にRepomixを実行し、コードベースの変化を追跡する
  - **最適な設定**: 目的に応じて圧縮レベルを調整（全体把握には高圧縮、詳細分析には低圧縮）し、includePatterns/ignorePatterns引数で分析対象を最適化する

## 重要ドキュメント

### プロジェクト基本情報

- [README.md](README.md) - プロジェクト概要、機能、構成、セットアップ方法
- [ドキュメントガイドライン](docs/README.md) - ドキュメント体系と構造の全体像

### 対象者別ガイド

- [開発者ガイド](docs/guide/developer/README.md) - 開発環境構築、API仕様、実装ガイドライン
- [運用者ガイド](docs/guide/operator/README.md) - デプロイメント、監視、メンテナンス
- [ユーザーガイド](docs/guide/users/README.md) - 基本操作、機能説明、トラブルシューティング

### ドキュメントルールと構造

- [ドキュメントルール概要](docs/rules/README.md) - ドキュメント作成・管理のルール
- [ドキュメント構造](docs/rules/structure.md) - ドキュメントの配置構造
- [ドキュメントリンク方法](docs/rules/links.md) - ドキュメント内のリンク方法

### AIツール連携

- [AIツール連携概要](docs/rules/ai/README.md) - AI連携の概要
- [コミットメッセージ規約](docs/rules/ai/commit.md) - コミットメッセージのルール
- [Repomixの活用](docs/rules/ai/tools/repomix.md) - Repomixの効果的な活用方法

### 詳細カテゴリ

- [クイックアクセスガイド](docs/README.md#クイックアクセスガイド) - 対象読者別エントリーポイントと主要カテゴリ
- [重要ドキュメント一覧](docs/README.md#重要ドキュメント一覧) - 基本ガイドライン、ドキュメントルール、メタデータと関連性、AIツール連携など
